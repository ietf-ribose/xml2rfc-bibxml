#!/usr/bin/env python3

"""
    Given a set of updated files from IEEE, update the corresponding files
    kept in our backing store.

    An update has these directories for IEEEDraftStd and IEEEstd:

	Deleted_IEEEDraftStd
	Deleted_IEEEstd
	IEEEUpdates_IEEEDraftStd
	IEEEUpdates_IEEEstd
	XML_IEEEDraftStd
	XML_IEEEstd

    We ignore the XML_* directories as they appear to have duplicates of
    the files we extract from the IEEEUpdates_* directories.

    Under each directory is a list of files named week#[a-z]* or week##[a-z]*.
    The numbers form a rolling window of about 12 weeks. There are two cases:

        a) all of the week numbers are in a single range
        b) week numbers from the end of one year and from the beginning of the next year

    The update directories have .zip files, which have files named like
    9134998/9134999/09135000.xml. (They may have already been extracted into the 
    subdirectories, giving path names such as IEEEUpdates_IEEEstd/week1a/9134998/9134999/09135000.xml.)

    The destination directory only has the XML files, but stored under directories for each year.

    1) sort the week numbers
        a) if there is a split across years, place the end-of-year numbers first
    2) for type in IEEEDraftStd, IEEEstd
        for week in weeks
            remove the files listed in the Deleted_$TYPE tree:
                if the file still exists somewhere in $DEST/$TYPE/YEARS/
                actually move it to $DEST/Deleted_$TYPE/$DATE_$WEEK tree
            add Updates to the proper year
                determine the year of publication, add to
                $DEST/$TYPE/$YEAR/path.xml

"""

import argparse
import glob
import sys
import re
import xml.etree.ElementTree as ET
from zipfile import ZipFile
from xml.dom.minidom import parse
sys.path.append((sys.path[0] if sys.path[0] != '' else '.') + "/../bibxml_common")
from bibxml_common import *

def get_xml_year(fname, s):
    """ Figure out the year for a standard. Look for
    <publication> <volume> <volumeinfo> <year>1922</year>
    """
    try:
        root = ET.fromstring(s)
    except:
        print(f"{fname}: WARNING: BAD XML found")
        return None

    return get_xml_text(root, './volume/volumeinfo/year')

def get_weeks(args):
    """ retrieve the list of weeks from the update directory """
    # 1) sort the week numbers
    weeks_glob = glob.glob(f"{args.update_directory}/*/week*")
    if not weeks_glob:
        sys.exit(f"Cannot find any weeks in {args.update_directory}")

    weeks = set()
    for fn in weeks_glob:
        m = re.search("week(\d+)[a-z].*$", fn)
        if m:
            weeks.add(int(m.group(1)))
        else:
            print(f"the week directory does not have a number at its end before a letter: {fn}")

    # 1a) if there is a split across years, place the end-of-year numbers first
    week_list = sorted(weeks)
    if week_list[0] < 20 and week_list[-1] > 30:
        week_list = [x for x in week_list if x > 30] + [x for x in week_list if x < 20]

    print(f"week_list={week_list}")
    return week_list

def delete_file(args, ieee_type, xml_file):
    """ for a given xml_file name, do the "deletion" of it """
    for del_file in glob.glob(f"{args.ieee_directory}/{ieee_type}/*/{xml_file}"):
        # ex: ieee-cache.20210301/Deleted_IEEEstd/week5b/7970248/8684486/08684487.xml
        ieee_dir_len = len(args.ieee_directory)+1
        renamed_file = f"{args.ieee_directory}/Deleted_{del_file[ieee_dir_len:]}"
        if args.verbose: print(f"    >>>>>>>>>>>>>>>> deleting {del_file} by renaming it to {renamed_file}")
        if args.test:
            print(f"test mode: skipping rename {del_file} to {renamed_file}")
            
        else:
            try:
                os.makedirs(os.path.dirname(renamed_file), exist_ok=True)
                try:
                    os.rename(del_file, renamed_file)
                except Exception as e:
                    print(f"cannot rename {del_file} to {renamed_file}: {e}")
            except Exception as e:
                print(f"cannot create directory for {renamed_file}: {e}")

def update_file(args, ieee_type, fname, contents, xml_file):
    """ for a given xml_file name, do the "update" of it """
    year = get_xml_year(fname, contents)
    if args.verbose: print(f"year={year}")

    if year is not None:
        # copy the file into place, using checkfile()
        # ex: ieee-backfiles/IEEEstd/2021/9316201/9316202/09316203.xml
        nfname = f"{args.ieee_directory}/{ieee_type}/{year}/{xml_file}"
        if args.verbose > 1:
            print(f"fname={fname} nfname={nfname}")
        if checkfile(args, nfname, contents, create_dirs=True) and args.verbose:
            print(f"UPD {nfname}")

    else:
        # move file to $DEST/Error_$TYPE/$DATE_$WEEK tree
        base_update_directory = os.path.basename(args.update_directory)
        if args.verbose > 1: print(f"base_update_directory={base_update_directory}")
        errfile = f"{args.ieee_directory}/Error_{base_update_directory}/{xml_file}"
        if args.verbose: print(f"Cannot determine the year from {fname}. Saving into {errfile}")
        check_file(args, errfile, contents, create_dirs=True)

def main():
    """ main function """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("-d", "--update-directory", help="top of directory containing the updates", type=str, required=True)
    parser.add_argument("-i", "--ieee-directory", help="top of IEEE directory to move files into", type=str)
    parser.add_argument("-t", "--test", help="Test mode; do not change any files", action="store_true")
    parser.add_argument("-x", "--use-xmlfile", help="Set to true if xml files are to be extracted from zip files", action="store_true")
    parser.add_argument("-v", "--verbose", help="Verbose, may be specified multiple times", action="count", default=0)
    parser.add_argument("filenames", nargs='*')
    args = parser.parse_args()

    if args.verbose > 1: print(f"directory with updates={args.update_directory}")

    week_list = get_weeks(args)

    # 2) for type in IEEEDraftStd, IEEEstd
    #    for week in weeks

    count = 0
    for ieee_type in ["IEEEDraftStd", "IEEEstd"]:
        for week in week_list:

            # remove the files listed in the Deleted_$TYPE tree:
            #     if the file still exists somewhere in $DEST/$TYPE/YEARS/, remove it
            #     actually move it to $DEST/Deleted_$TYPE/$DATE_$WEEK tree

            for del_dir in glob.glob(f"{args.update_directory}/Deleted_{ieee_type}/week{week}[a-z]"):
                if args.verbose > 2: print(f"del_dir={del_dir}")
                del_len = len(del_dir)+1
                if args.use_xmlfile:
                    for file in glob.glob(f"{del_dir}/*/*/*.xml"):
                        count += 1
                        xml_file = file[del_len:]
                        if args.verbose > 2: print(f"    del file={file}, xml file={xml_file}")
                        delete_file(args, ieee_type, xml_file)

                else:
                    for file in glob.glob(f"{del_dir}/*.zip"):
                        if args.verbose > 2: print(f"    del zip file={file}")
                        with ZipFile(file, 'r') as zipObj:
                            list_of_file_names = zipObj.namelist()
                            if args.verbose > 2: print(f"list_of_file_names={list_of_file_names}")
                            # Iterate over the file names
                            for internal_file_name in list_of_file_names:
                                # Check that the filename ends with .xml
                                if internal_file_name.lower().endswith('.xml'):
                                    count += 1
                                    if args.verbose > 2: print(f"        del xml file={internal_file_name.lower()}")
                                    delete_file(args, ieee_type, internal_file_name)

            # add Updates to the proper year
            #     determine the year of publication, add to
            #         $DEST/$TYPE/$YEAR/path.xml

            for upd_dir in glob.glob(f"{args.update_directory}/IEEEUpdates_{ieee_type}/week{week}[a-z]"):
                if args.verbose > 2: print(f"upd_dir={upd_dir}")
                upd_len = len(upd_dir)+1
                if args.use_xmlfile:
                    # update from an xml file previously extracted from a zip file
                    for fname in glob.glob(f"{upd_dir}/*/*/*.xml"):
                        count += 1
                        # ex: ieee-cache.20210301/IEEEUpdates_IEEEstd/week4a/9316201/9316202/09316203.xml
                        if args.verbose > 2: print(f"    upd fname={fname}")
                        xml_name = fname[upd_len:]
                        if args.verbose > 2: print(f"        xml name = {xml_name}")
                        # figure out the year for the new fname from
                        # <publication> <volume> <volumeinfo> <year>1922</year>
                        contents = get_file_contents(fname)
                        if args.verbose > 3: print(f"{contents[0:120]}")
                        update_file(args, ieee_type, fname, contents, xml_name)

                else:
                    # update from a zip file
                    for file in glob.glob(f"{upd_dir}/*.zip"):
                        if args.verbose > 2: 
                            print(f"    upd file={file}")
                            print(f"    suffix = {file[upd_len:]}")
                        with ZipFile(file, 'r') as zipObj:
                            list_of_file_names = zipObj.namelist()
                            if args.verbose > 2: print(f"list_of_file_names={list_of_file_names}")
                            # Iterate over the file names
                            for internal_file_name in list_of_file_names:
                                # Check filename endswith xml
                                if internal_file_name.lower().endswith('.xml'):
                                    count += 1
                                    # Extract all xml files from zip
                                    if args.verbose > 2: print(f"extracting {internal_file_name}")
                                    fname = f"{file} - {internal_file_name}"
                                    contents = zipObj.read(internal_file_name)
                                    if args.verbose > 3: print(f"read: {contents[0:120]}")
                                    # update_file(args, ieee_type, fname, contents.decode('utf-8'), internal_file_name)

    print(f"Files processed: {count}")

if __name__ == "__main__":
    main()
