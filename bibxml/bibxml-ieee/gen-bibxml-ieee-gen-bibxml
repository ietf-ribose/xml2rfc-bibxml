#!/usr/bin/env python3

"""
    The files gathered from the IEEE FTP site consist of a set of
    zip files, which in turn contain xml files, one xml file per
    standard.

    Given a directory gathered from the IEEE FTP site,
    create a bibxml tree to match.
    Be able to work from the xml files OR the zip files.
"""
#    Author: Tony Hansen

#    Filenames may also be specified

import argparse
import os
import re
import sys
import xml.etree.ElementTree as ET
from zipfile import ZipFile

sys.path.append((sys.path[0] if sys.path[0] != '' else '.') + "/../bibxml_common")
# pylint: disable=C0413
import bibxml_common


def gen_xml_contents(args, fname, xml_root):
    """
    Given XML in IEEE format, generate equivalent BIBXML format and write
    to the args.bibxml_dir directory.
    """

    # This shows the mapping of items in the IEEE xml into the bibxml output.
    # filename: reference.IEEE.802.16M_2011.xml
    #        <publication><publicationinfo><stdnumber>802.16m-2011 => IEEE.802.16M_2011
    #
    # <reference anchor='
    #        <publication><publicationinfo><stdnumber>802.16m-2011 => IEEE.802.16M_2011
    # ' target='http://ieeexplore.ieee.org/servlet/opac?punumber=
    #        <publication><publicationinfo><amsid>5765734
    # '>
    # <front>
    # <title>
    #        <publication><volume><article><title>IEEE Standard for Local and
    # metropolitan area networks Part 16: Air Interface for Broadband Wireless
    # Access Systems Amendment 3: Advanced Air Interface
    # </title>
    # <author>
    # <organization>IEEE</organization>
    # </author>
    # <date day= month= year= />
    #        <publication><volume><articleinfo>
    #            <date datetype="OriginalPub">
    #                <year>2011</year>
    #                <month>May</month>
    #                <day>6</day>
    #
    # <abstract><t>
    #        <publication><volume><articleinfo>
    #            <abstract abstracttype="Regular">This amendment specifies the
    # WirelessMAN-Advanced Air Interface, an enhanced air interface designated
    # as "IMT-Advanced" by the International Telecommunication Union-
    # Radiocommunication Sector (ITU-R). The amendment is based on the
    # WirelessMAN-OFDMA specification and provides continuing support for
    # legacy subscriber stations.
    # </t></abstract>
    # </front>
    # <seriesInfo name='IEEE' value='
    #        <publication><publicationinfo><stdnumber>802.16m-2011
    # '/>
    # <seriesInfo name='DOI' value='
    #        <publication><volume><article><articleinfo><articledoi>
    # ' />
    # </reference>

    try:
        root = ET.fromstring(xml_root)
    except:
        print(f"{fname}: WARNING: BAD XML found")
        return None, None, None, None

    ref = bibxml_common.gen_empty_ref_xml("IEEE")

    stdnumber = bibxml_common.get_xml_text(root, './publicationinfo/stdnumber')
    # change [/, ] => _, with __=>_
    ref['rdftitle'] = ref["title"] = bibxml_common.get_xml_text(root, './volume/article/title')

    years = bibxml_common.get_xml_text_by_attribute(root, './volume/article/articleinfo/date', 'datetype', './year')
    year = bibxml_common.get_xml_first_of(years, ('OriginalPub', 'ePub'))
    months = bibxml_common.get_xml_text_by_attribute(root, './volume/article/articleinfo/date', 'datetype', './month')
    month = bibxml_common.get_xml_first_of(months, ('OriginalPub', 'ePub'))
    days = bibxml_common.get_xml_text_by_attribute(root, './volume/article/articleinfo/date', 'datetype', './day')
    day = bibxml_common.get_xml_first_of(days, ('OriginalPub', 'ePub'))

    abstracts = bibxml_common.get_xml_text_by_attribute(root, './volume/article/articleinfo/abstract', 'abstracttype', '.')
    ref["abstract"] = bibxml_common.get_xml_first_of(abstracts, ('Regular', 'Standard'))
    if ref["abstract"] is None:
        ref["abstract"] = ""

    amsid = bibxml_common.get_xml_text(root, './publicationinfo/amsid')
    ref['url'] = f"http://ieeexplore.ieee.org/servlet/opac?punumber={amsid}"

    ref["series_info"] = [ ]
    ref["series_info"].append( { "name": "IEEE", "value": stdnumber } )
    doi = bibxml_common.get_xml_text(root, './volume/article/articleinfo/articledoi')
    if doi:
        ref["series_info"].append( { "name": "DOI", "value": doi } )

    # print(f"xml looks like:\n{x}")
    #if not stdnumber or not ref['title'] or not year or not month or not day or not ref['abstract'] or not amsid or not doi:
    #    # print(f"xml looks like:\n{x}")
    #    pass

    mod_stdnumber = re.sub('_+', '_', re.sub(r'[/,\'" ]', '_', stdnumber))
    bibxml_file = f"{args.bibxml_dir}/reference.IEEE.{mod_stdnumber}.xml"

    ref['anchor'] = f"IEEE.{mod_stdnumber}"

    if month:
        if str(month).find(' ') > -1:
            monthparts = month.split(' ')
            if day is not None:
                print(f"{fname}: WARNING: found a month value of {month}, but day alreay has a value of {day}")
            day = monthparts[0]
            month = monthparts[1]
            if args.warnings:
                print(f"{fname} has both the month and day in the month field")

        svmonth = month
        month = bibxml_common.monthnames.get(month.replace(".",""))
        if not month:
            print(f"{bibxml_file}: WARNING: the month name of '{svmonth}' is not known. Setting the month blank.")

    ref["date"] = { "year": year, "month": month, "day": day }

    xml = bibxml_common.gen_xml(ref)

    if month is None:
        ref['date']['month'] = "January"
    if day is None:
        ref['date']['day'] = '1'
    rdf = bibxml_common.gen_rdf(ref)
    if args.verbose > 2:
        print(f"================ {mod_stdnumber} ================")
        print(xml)
        print(rdf)

    return mod_stdnumber, bibxml_file, xml, rdf


def process_xml_contents(args, fname, xml_root, bibxml_files):
    """
    Write out the generated bibxml files.
    """
    mod_stdnumber, bibxml_file, xml, rdf = gen_xml_contents(args, fname, xml_root)
    if mod_stdnumber is None:
        return

    bibxml_files.add(bibxml_file)
    bibxml_common.verbose_print(args, 1, f"writing {bibxml_file}")

    bibxml_common.checkfile(args, bibxml_file, xml)

    rdf_disk_file = f"{args.bibxml_dir}/rdf/item.IEEE.{mod_stdnumber}.rdf"
    bibxml_common.checkfile(args, rdf_disk_file, rdf)


def process_xml(args, fname, bibxml_files):
    """
    Given an xml file, read the contents, and create a bibxml file from it.
    """
    count = 0
    with open(fname, "r") as fp:
        x = fp.read()
        process_xml_contents(args, fname, x, bibxml_files)
        count += 1
    return count


def process_zip(args, fname, bibxml_files):
    """
    Given an xml file, read the contents, and create a bibxml file from it.
    """
    count = 0
    with ZipFile(fname, 'r') as zipObj:
        listOfFileNames = zipObj.namelist()
        bibxml_common.verbose_print(args, 1, f"listOfFileNames={listOfFileNames}")
        # Iterate over the file names
        for fileName in listOfFileNames:
            # Check filename endswith xml
            if fileName.endswith('.xml'):
                # Extract all xml files from zip
                x = zipObj.read(fileName)
                process_xml_contents(args, f"{fname} -> {fileName}", x, bibxml_files)
                count += 1
    return count


def process(args, fname, bibxml_files):
    """
    Process a given filename.
    If a .xml file, create a bibxml file from it.
    If a .zip file, extract each .xml file from it, then process as above.
    """
    bibxml_common.verbose_print(args, 1, f"processing {fname}")
    if fname.endswith(".xml"):
        process_xml(args, fname, bibxml_files)
    elif fname.endswith(".zip"):
        process_zip(args, fname, bibxml_files)
    else:
        sys.exit(f"Cannot process {fname}")


def search_files(args, dirname, ext):
    """
    Search the given directory for files with the given extension.
    Invoke process() on each.
    """
    bibxml_files = set()
    count = 0
    for root, _, files in os.walk(dirname):
        for fname in files:
            if fname.endswith(ext):
                process(args, f"{root}/{fname}", bibxml_files)
                count += 1
    return count


def run_unit_tests(args):
    """
    Run some unit tests on some of the code modules.
    """
    # TODO -- fill in here
    bibxml_common.empty_run_unit_tests(args)


def main():
    """ main function """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("-b", "--bibxml-dir", help="top of bibxml directory to create", type=str)
    parser.add_argument("-i", "--ieee-directory", help="top of IEEE directory to search", type=str)
    parser.add_argument("-x", "--process-xml-files", help="Set to true if xml files in ieee-directory are to be processed", action='store_true')
    parser.add_argument("-z", "--process-zip-files", help="Set to true if zip files in ieee-directory are to be processed", action='store_true')
    parser.add_argument("-f", "--process-file-list", help="List of files to be processed", type=str)
    parser.add_argument("-c", "--clean-bibxml", help="When used with --ieee-directory, clean up bibxml files not in the current IEEE directory", action="store_true")
    parser.add_argument("-S", "--skip-clean", help="When cleaning, only print the bibxml filenames that would be removed", action="store_true")
    parser.add_argument("-t", "--test", help="Test mode; do not change any files", action="store_true")
    parser.add_argument("-w", "--warnings", help="Enable some additional warnings about things in the IEEE files that have been worked around", action="store_true")
    parser.add_argument("-T", "--unit-tests", help="Run unit tests", action="store_true")
    parser.add_argument("-v", "--verbose", help="Verbose, may be specified multiple times", action="count", default=0)
    parser.add_argument("filenames", nargs='*')
    args = parser.parse_args()

    if args.unit_tests:
        run_unit_tests(args)

    if not args.bibxml_dir:
        bibxml_common.usage(parser, "error: the following arguments are required: -b/--bibxml-dir")

    os.makedirs(args.bibxml_dir, exist_ok=True)
    os.makedirs(args.bibxml_dir + "/rdf", exist_ok=True)

    if args.process_xml_files + args.process_zip_files + (len(args.filenames) > 0) > 1:
        sys.exit("Only one of --process-xml-files (-x), --process-zip-files (-z) and filenames may be specified")

    if (args.process_xml_files or args.process_zip_files) and not args.ieee_directory:
        sys.exit("-ieee-directory (-i) is required with  --process-xml-files (-x) or --process-zip-files (-z)")

    count = 0
    if args.filenames:
        for file in args.filenames:
            process(args, file, set())
            count += 1

    if args.process_xml_files:
        count += search_files(args, args.ieee_directory, ".xml")

    if args.process_zip_files:
        count += search_files(args, args.ieee_directory, ".zip")

    if args.process_file_list:
        with open(args.process_file_list) as fp:
            for line in fp:
                process(args, line.strip(), set())
                count += 1

    # generate index.html file
    hx = bibxml_common.gen_index_html_set(args.bibxml_dir, "reference.")
    index_html = bibxml_common.gen_index_html(hx)
    bibxml_common.checkfile(args, f"{args.bibxml_dir}/index.html", index_html)

    # generate index.rdf file
    rx = bibxml_common.gen_index_rdf_scan(f"{args.bibxml_dir}/index.rdf", f"{args.bibxml_dir}/rdf", "item.")
    index_rdf = bibxml_common.gen_index_rdf(rx)
    bibxml_common.checkfile(args, f"{args.bibxml_dir}/index.rdf", index_rdf)

    print(f"Files processed: {count}")

if __name__ == "__main__":
    main()

    # TODO auto cleanup for --bibxml-cleanup
    # as bibxml_file names are created, fill in bibxml_files[bibxml_file] set
    # then run through the entire list at the end and clean
    # check bibxml-nist options
